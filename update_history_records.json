{
  "metadata": {
    "totalRecords": 2,
    "lastUpdated": "2025-08-22T04:44:00.000000",
    "version": "1.3.0"
  },
  "records": [
    {
      "id": 1,
      "title": "بروزرسانی دستورالعمل‌های GitHub Copilot برای سیستم تاریخچه",
      "version": "1.2.0",
      "shamsiDate": "۱۴۰۴/۰۵/۳۱",
      "shamsiTime": "00:27",
      "createdAt": "2025-08-22T00:27:36.259644",
      "userProblem": "GitHub Copilot نیاز به دستورالعمل جامع و دقیق برای ثبت خودکار تاریخچه بروزرسانی‌ها داشت",
      "solutionDescription": "بروزرسانی کامل فایل .github/instructions/update_history_automation.instructions.md شامل:\n\n✨ ویژگی‌های کلیدی اضافه شده:\n• مأموریت واضح و دقیق برای GitHub Copilot\n• مدل داده‌ای کامل UpdateHistory با تمام فیلدهای ضروری\n• ۴ قانون اجباری: تایید کاربر، زمان‌بندی، دسته‌بندی، اولویت‌بندی\n• گردش کار ۴ مرحله‌ای: تشخیص → جمع‌آوری → تایید → ثبت\n• الگوهای استاندارد برای Feature، Bug Fix، UI Update\n• سناریوهای خاص: تغییرات متعدد، جزئی، اضطراری\n• هشدارها و بهترین شیوه‌ها (DO/DON'T)\n• نمونه کد عملی قابل استفاده مستقیم\n• بخش گزارش‌گیری و پیگیری کیفیت\n\n🔧 قوانین کلیدی:\n- CRITICAL: هرگز بدون تایید کاربر رکورد ثبت نشود\n- دسته‌بندی‌های استاندارد: Feature|Bug Fix|UI Update|Database|API|Performance|Security|Documentation\n- اولویت‌بندی دقیق: Critical|High|Medium|Low\n- گردش کار مرحله‌ای برای هر تغییر\n\n🎯 نتیجه نهایی:\nGitHub Copilot حالا قوانین جامع و دقیقی برای ثبت تاریخچه دارد و پس از هر تغییر مهم، حتماً تایید کاربر می‌گیرد.",
      "userComment": "دستورالعمل‌های جدید باعث بهبود کیفیت ثبت تاریخچه و مستندسازی بهتر تغییرات می‌شود. این تغییر بنیادی در نحوه کار GitHub Copilot خواهد داشت.",
      "tags": "github-copilot,documentation,automation,instructions,update-history,guidelines,workflow",
      "priority": "medium",
      "category": "documentation",
      "status": "completed",
      "affectedFiles": [
        ".github/instructions/update_history_automation.instructions.md"
      ],
      "changes": [
        "بازنویسی کامل دستورالعمل‌های GitHub Copilot",
        "اضافه کردن ۴ قانون اجباری",
        "تعریف گردش کار ۴ مرحله‌ای",
        "افزودن الگوهای استاندارد برای انواع تغییرات",
        "اضافه کردن نمونه کدهای عملی",
        "ایجاد بخش گزارش‌گیری و پیگیری کیفیت",
        "تعریف سناریوهای خاص و راه‌حل‌ها",
        "اضافه کردن هشدارها و بهترین شیوه‌ها"
      ]
    },
    {
      "id": 2,
      "title": "مهاجرت از SQLite به MySQL",
      "version": "1.3.0",
      "shamsiDate": "۱۴۰۴/۰۶/۰۱",
      "shamsiTime": "08:44",
      "createdAt": "2025-08-22T04:44:00.000000",
      "userProblem": "نیاز به یکپارچگی دیتابیس در همه پلتفرم‌ها و حل مشکل عدم همگام‌سازی بین وب و دسکتاپ. SQLite در وب مشکل‌ساز بود و هر پلتفرم داده‌های جداگانه داشت.",
      "solutionDescription": "مهاجرت کامل از SQLite به MySQL با معماری API-based:\n\n🏗️ تغییرات معماری:\n• MySQLAdapter جدید برای ارتباط با سرور از طریق HTTP API\n• DatabaseManager بروزرسانی شده برای استفاده از MySQL\n• حذف کامل وابستگی‌های SQLite (sqflite_common_ffi, sqflite_common_ffi_web)\n• Backend API با Node.js + Express + MySQL\n• Schema کامل MySQL با جداول بهینه‌شده\n\n✅ مزایای جدید:\n• یکپارچگی: یک دیتابیس برای همه پلتفرم‌ها\n• همگام‌سازی: داده‌ها فوری در همه دستگاه‌ها بروز می‌شوند\n• مقیاس‌پذیری: آماده برای هزاران کاربر\n• پایداری: پشتیبان‌گیری و مقاومت در برابر خرابی\n• سادگی: فقط یک معماری برای نگهداری\n\n🔧 پیاده‌سازی فنی:\n• HTTP API calls جایگزین database queries محلی\n• JSON data transfer بین client و server\n• Authentication با API keys\n• Error handling و retry mechanisms\n• Caching برای بهبود performance",
      "userComment": "تغییر بنیادی در معماری که مشکلات پلتفرم‌های مختلف را حل کرد. حالا یک دیتابیس واحد داریم.",
      "tags": "mysql,database-migration,api,backend,architecture,unification,cross-platform",
      "priority": "high",
      "category": "database",
      "status": "completed",
      "affectedFiles": [
        "lib/database/mysql_adapter.dart",
        "lib/database/database_manager.dart",
        "pubspec.yaml",
        "backend/server.js",
        "backend/schema.sql",
        "mysql_migration_guide.md"
      ],
      "changes": [
        "ایجاد MySQLAdapter جدید با HTTP API integration",
        "بروزرسانی DatabaseManager برای MySQL support",
        "حذف SQLite dependencies از pubspec.yaml",
        "ایجاد Backend API با Node.js + Express",
        "طراحی Schema کامل MySQL",
        "ایجاد راهنمای مهاجرت کامل",
        "پیاده‌سازی Authentication و Security",
        "افزودن Error handling و Logging"
      ]
    }
  ]
}