---
applyTo: "**"
---

# 🤖 GitHub Copilot - دستورالعمل تاریخچه بروزرسانی MySQL

## 🎯 مأموریت اصلی

GitHub Copilot باید **همیشه** پس از انجام تغییرات، تاریخچه بروزرسانی را مستقیماً در MySQL به‌روز کند.

## 🗄️ سیستم دیتابیس MySQL

### دیتابیس: `ai_123`

### جدول: `update_history`

```sql
CREATE TABLE update_history (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    version VARCHAR(50) NOT NULL,
    shamsi_date VARCHAR(20) NOT NULL,
    shamsi_time VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_problem TEXT NOT NULL,
    solution_description TEXT NOT NULL,
    user_comment TEXT,
    tags TEXT,
    priority ENUM('low', 'medium', 'high', 'critical') DEFAULT 'medium',
    category ENUM('feature', 'bugfix', 'enhancement', 'security', 'testing') DEFAULT 'feature',
    status ENUM('completed', 'in_progress', 'planned') DEFAULT 'completed'
);
```

## 🚨 قوانین اجباری جدید

### قانون شماره 1: ثبت مستقیم در MySQL

```
❗ CRITICAL: از روش مستقیم MySQL استفاده کن!

فرمت دستور استاندارد:
mysql -u root ai_123 -e "
INSERT INTO update_history (
    title, version, shamsi_date, shamsi_time,
    user_problem, solution_description, tags,
    priority, category, status
) VALUES (
    'عنوان تغییر',
    'نسخه',
    'تاریخ شمسی',
    'زمان',
    'شرح مشکل',
    'شرح راه‌حل',
    'برچسب‌ها',
    'اولویت',
    'دسته‌بندی',
    'وضعیت'
);"
```

### قانون شماره 2: تایید کاربر قبل از ثبت

```
⏰ TIMING: سوال تایید قبل از اجرای دستور MySQL

سوال استاندارد:
"آیا می‌خواهید این تغییرات در تاریخچه MySQL ثبت شود؟

📋 جزئیات ثبت:
- عنوان: [title]
- نسخه: [version]
- دسته: [category]
- اولویت: [priority]

دستور MySQL آماده اجرا:
mysql -u root ai_123 -e \"INSERT INTO update_history...\"

(بله/خیر)"
```

### قانون شماره 3: دسته‌بندی استاندارد

```
📂 CATEGORIES: استفاده از مقادیر ENUM

✅ مجاز برای category:
- "feature"      → ویژگی جدید
- "bugfix"       → رفع باگ
- "enhancement"  → بهبود موجود
- "security"     → امنیت
- "testing"      → تست

✅ مجاز برای priority:
- "low"          → کم
- "medium"       → متوسط
- "high"         → بالا
- "critical"     → بحرانی

✅ مجاز برای status:
- "completed"    → تکمیل شده
- "in_progress"  → در حال انجام
- "planned"      → برنامه‌ریزی شده
```

```
❗ CRITICAL: هرگز بدون تایید کاربر رکورد ثبت نکنید!

فرمت سوال استاندارد:
"تغییرات انجام شد. آیا در تاریخچه بروزرسانی ثبت شود؟

📋 خلاصه:
- عنوان: [title]
- نوع: [category]
- اولویت: [priority]
- فایل‌ها: [affected_files]

(بله/خیر یا yes/no)"
```

### قانون شماره 2: زمان‌بندی

```
⏰ TIMING: ثبت رکورد در زمان‌های زیر اجباری است:

✅ بلافاصله پس از:
- ایجاد فایل جدید
- ویرایش منطق کسب و کار
- رفع باگ
- تغییر UI/UX
- بروزرسانی دیتابیس
- اضافه کردن ویژگی

❌ قبل از:
- git commit
- git push
- پایان جلسه کار
```

### قانون شماره 3: دسته‌بندی

```
📂 CATEGORIES: استفاده از دسته‌بندی‌های استاندارد

✅ مجاز:
- "Feature"      → ویژگی جدید
- "Bug Fix"      → رفع باگ
- "UI Update"    → تغییر رابط کاربری
- "Database"     → تغییر دیتابیس
- "API"          → تغییر API
- "Performance"  → بهینه‌سازی
- "Security"     → امنیت
- "Documentation" → مستندات

❌ غیرمجاز:
- دسته‌بندی‌های سفارشی
- نام‌های نامشخص
- فارسی برای category (فقط انگلیسی)
```

### قانون شماره 4: اولویت‌بندی

````
🎯 PRIORITY: تعیین اولویت بر اساس تأثیر

## � گردش کار (Workflow)

### مرحله 1: تشخیص تغییر
```python
if any([
    "ایجاد فایل جدید",
    "ویرایش کد موجود",
    "رفع باگ",
    "تغییر UI",
    "بروزرسانی دیتابیس",
    "اضافه کردن dependency"
]):
    proceed_to_step_2()
````

### مرحله 2: جمع‌آوری داده‌ها

```yaml
collect_data:
  title: "عنوان کوتاه و واضح"
  description: "شرح کامل تغییر"
  category: "یکی از دسته‌های مجاز"
  priority: "Low|Medium|High|Critical"
  version: "نسخه فعلی از pubspec.yaml"
  changes: ["لیست دقیق تغییرات"]
  affected_files: ["مسیر کامل فایل‌ها"]
```

### مرحله 3: تایید کاربر

```bash
ask_user_confirmation() {
    echo "❓ آیا در تاریخچه ثبت شود؟"
    echo "📋 جزئیات: [اطلاعات جمع‌آوری شده]"
    read -p "(بله/خیر): " response

    if [[ "$response" =~ ^([yY][eE][sS]|[yY]|بله|ب)$ ]]; then
        return 0  # تأیید
    else
        return 1  # رد
    fi
}
```

### مرحله 4: ثبت رکورد

```dart
if (user_confirmed) {
    await UpdateHistoryService.autoRegisterUpdate(
        title: collected_title,
        description: collected_description,
        category: collected_category,
        priority: collected_priority,
        version: current_version,
        changes: collected_changes,
        affectedFiles: affected_files,
    );

    print("✅ رکورد در تاریخچه بروزرسانی ثبت شد");
} else {
    print("❌ ثبت رکورد لغو شد");
}
```

## � الگوهای استاندارد

### ویژگی جدید

```dart
title: "اضافه کردن [نام ویژگی]"
description: "پیاده‌سازی [ویژگی] با قابلیت‌های [x, y, z]"
category: "Feature"
priority: "Medium" // یا High
changes: [
    "ایجاد مدل [Model]",
    "پیاده‌سازی سرویس [Service]",
    "ایجاد رابط کاربری [UI]"
]
```

### رفع باگ

```dart
title: "رفع مشکل [شرح مختصر]"
description: "مشکل: [توضیح مشکل]
راه‌حل: [توضیح راه‌حل]"
category: "Bug Fix"
priority: "High"
changes: [
    "اصلاح validation در [فایل]",
    "بهبود error handling"
]
```

### بروزرسانی UI

```dart
title: "بهبود رابط کاربری [نام صفحه]"
description: "بهبود تجربه کاربری و طراحی [صفحه/بخش]"
category: "UI Update"
priority: "Medium"
changes: [
    "طراحی مجدد [کامپوننت]",
    "بهبود responsive design",
    "اضافه کردن انیمیشن"
]
```

## 🎭 سناریوهای خاص

### سناریو 1: تغییرات متعدد

```
اگر چندین فایل تغییر کرد:
→ یک رکورد کلی با لیست کامل فایل‌ها ثبت کنید
→ در changes همه تغییرات را ذکر کنید
```

### سناریو 2: تغییرات جزئی

```
برای تغییرات جزئی (مثل فیکس typo):
→ priority = "Low"
→ category = "Documentation" یا مناسب
→ هنوز هم تایید کاربر بگیرید
```

### سناریو 3: تغییرات اضطراری

```
برای باگ‌های critical:
→ priority = "Critical"
→ category = "Bug Fix"
→ فوری تایید بگیرید و ثبت کنید
```

## ⚠️ هشدارها

### 🚫 NEVER DO:

```
❌ ثبت بدون تایید کاربر
❌ استفاده از دسته‌بندی‌های غیراستاندارد
❌ فراموش کردن ثبت رکورد
❌ توضیحات نامشخص یا کوتاه
❌ عدم ذکر فایل‌های تغییر یافته
```

### ✅ ALWAYS DO:

```
✅ تایید کاربر قبل از ثبت
✅ توضیحات کامل و واضح
✅ استفاده از دسته‌بندی‌های استاندارد
✅ ذکر همه فایل‌های دخیل
✅ تعیین اولویت صحیح
```

## 🔧 نمونه کد عملی

```dart
// نمونه کامل ثبت رکورد
Future<void> exampleUpdateRecord() async {
  // جمع‌آوری اطلاعات
  final title = "اضافه کردن سیستم احراز هویت";
  final description = "پیاده‌سازی کامل سیستم لاگین و ثبت‌نام با JWT token";
  final category = "Feature";
  final priority = "High";
  final changes = [
    "ایجاد AuthService برای مدیریت authentication",
    "افزودن LoginScreen و RegisterScreen",
    "پیاده‌سازی JWT token handling",
    "اضافه کردن validation برای فرم‌ها"
  ];
  final affectedFiles = [
    "lib/services/auth_service.dart",
    "lib/screens/login_screen.dart",
    "lib/screens/register_screen.dart",
    "lib/models/user.dart"
  ];

  // ثبت رکورد
  final success = await UpdateHistoryService.autoRegisterUpdate(
    title: title,
    description: description,
    category: category,
    priority: priority,
    changes: changes,
    affectedFiles: affectedFiles,
  );

  if (success) {
    print("✅ رکورد ثبت شد");
  } else {
    print("❌ خطا در ثبت رکورد");
  }
}
```

## 📊 گزارش‌گیری

### آمار روزانه

```
در پایان هر روز، خلاصه‌ای از کارهای انجام شده:
- تعداد رکوردهای ثبت شده: X
- دسته‌بندی تغییرات: [Feature: X, Bug Fix: Y, ...]
- فایل‌های تغییر یافته: X فایل
```

### پیگیری کیفیت

```
بررسی منظم:
- آیا همه تغییرات ثبت شده‌اند؟
- آیا توضیحات کافی هستند؟
- آیا دسته‌بندی‌ها صحیح هستند؟
```

---

## 🎯 خلاصه مأموریت

**شما باید:**

1. 🔍 همه تغییرات را رصد کنید
2. ❓ از کاربر تایید بگیرید
3. 📝 رکورد کاملی ثبت کنید
4. ✅ موفقیت را گزارش دهید

**هدف نهایی:** تاریخچه کامل و دقیقی از تمام تغییرات پروژه

**موفق باشید! 🚀**

````
| تغییرات UI          | UI Update     | Medium      |
| تغییرات پایگاه داده | Database      | High        |
| بروزرسانی مستندات   | Documentation | Low         |
| بهینه‌سازی کد       | Optimization  | Medium      |

## متن‌های پیش‌فرض سوالات

### سوال تاریخچه بروزرسانی

```markdown
🤔 **سوال تایید تاریخچه:**

آیا می‌خواهید این تغییرات در سیستم تاریخچه بروزرسانی ثبت شود؟

✅ در صورت انتخاب "بله":

- رکورد جدید در پایگاه داده ایجاد می‌شود
- جزئیات تغییرات ذخیره می‌شود
- تاریخ و زمان شمسی ثبت می‌شود

❌ در صورت انتخاب "خیر":

- هیچ رکوردی ایجاد نمی‌شود
- تغییرات فقط در کد اعمال می‌شود
````

### سوال بروزرسانی مستندات

```markdown
🤔 **سوال تایید مستندات:**

آیا می‌خواهید مستندات پروژه بروزرسانی شود؟

📚 فایل‌هایی که بروزرسانی خواهند شد:

- README.md
- CHANGELOG.md
- API Documentation
- Database Schema
- فایل‌های Docs/

✅ در صورت انتخاب "بله":

- تمام مستندات مرتبط بروزرسانی می‌شود
- تغییرات در ساختار پروژه منعکس می‌شود

❌ در صورت انتخاب "خیر":

- مستندات دست‌نخورده باقی می‌ماند
- شما بعداً باید آن‌ها را بروزرسانی کنید
```

### سوال ارسال به Git

```markdown
🤔 **سوال تایید Git:**

آیا می‌خواهید تغییرات به مخزن Git ارسال شود؟

🔄 عملیات‌هایی که انجام خواهد شد:

1. git add . (اضافه کردن فایل‌های جدید)
2. git commit -m "پیام commit"
3. git push origin main

✅ در صورت انتخاب "بله":

- تمام تغییرات commit و push می‌شود
- تاریخچه Git بروزرسانی می‌شود

❌ در صورت انتخاب "خیر":

- تغییرات محلی باقی می‌ماند
- شما بعداً باید آن‌ها را commit کنید
```

## نمونه‌های مختلف ثبت

### 1. افزودن ویژگی جدید

```dart
await UpdateHistoryService.autoRegisterUpdate(
  title: 'اضافه کردن سیستم ارسال پیامک',
  description: 'سیستم جامع ارسال پیامک با پشتیبانی از چندین سامانه و ثبت لاگ کامل',
  category: 'Feature',
  priority: 'High',
  version: '1.2.0',
  changes: [
    'افزودن SmsService با قابلیت ارسال پیامک',
    'ایجاد SmsPanel برای مدیریت پیامک‌ها',
    'افزودن مدل‌های SmsProvider و SmsLog',
    'بروزرسانی پایگاه داده با جداول جدید',
  ],
  affectedFiles: [
    'lib/services/sms_service.dart',
    'lib/widgets/sms_panel.dart',
    'lib/models/sms_provider.dart',
    'lib/database/database_helper.dart',
  ],
);
```

### 2. رفع باگ

```dart
await UpdateHistoryService.autoRegisterUpdate(
  title: 'رفع مشکل تبدیل اعداد فارسی',
  description: 'حل مشکل تبدیل نشدن اعداد فارسی و عربی در سیستم ارسال پیامک',
  category: 'Bug Fix',
  priority: 'High',
  version: '1.1.1',
  changes: [
    'افزودن PersianNumberUtils برای تبدیل اعداد',
    'تکمیل منطق تبدیل در SmsService',
    'اصلاح regex برای شناسایی شماره‌های موبایل',
  ],
  affectedFiles: [
    'lib/utils/persian_number_utils.dart',
    'lib/services/sms_service.dart',
  ],
);
```

### 3. بروزرسانی UI

```dart
await UpdateHistoryService.autoRegisterUpdate(
  title: 'بهبود رابط کاربری داشبورد مدیریت',
  description: 'طراحی مجدد داشبورد مدیریت با کارت‌های جدید و منوی بهبود یافته',
  category: 'UI Update',
  priority: 'Medium',
  version: '1.1.2',
  changes: [
    'طراحی مجدد کارت‌های داشبورد',
    'افزودن انیمیشن‌های smooth',
    'بهبود responsive design برای mobile',
    'اضافه کردن dark mode support',
  ],
  affectedFiles: [
    'lib/screens/admin_dashboard.dart',
    'lib/widgets/dashboard_card.dart',
    'lib/utils/theme_data.dart',
  ],
);
```

## اسکریپت خودکار

برای ثبت سریع‌تر، از فایل `auto_register_update.dart` استفاده کنید:

```bash
# اجرای مستقیم
dart run auto_register_update.dart

# یا از طریق Flutter
flutter run auto_register_update.dart
```

> **نکته مهم:** همیشه پس از تغییرات اساسی، این سه سوال را مطرح کنید و عملیات را فقط پس از تایید کاربر انجام دهید.
